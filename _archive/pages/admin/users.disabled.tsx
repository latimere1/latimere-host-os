// pages/admin/users.tsx
// ────────────────────────────────────────────────────────────────────────────
// Admin-only user–role management panel for Latimere Host OS
// • Lists all UserProfile rows
// • Allows an admin to promote/demote by clicking a role button
// • Uses GraphQL listUserProfiles + updateUserProfile
// • Wrapped with withRole(['admin']) so only Admins can reach it
// • Verbose console.log calls sprinkled in for easy debugging
// ────────────────────────────────────────────────────────────────────────────

import { useEffect, useState } from 'react';
import { generateClient } from 'aws-amplify/api';

// Auto‑generated by Amplify codegen (adjust import path if different)
import { listUserProfiles } from '@/src/graphql/queries';
import { updateUserProfile } from '@/src/graphql/mutations';

import type { UserProfile } from '@/src/types/UserProfile';
import { withRole } from '@/src/components/withRole';
import Layout from '@/src/components/Layout';

const client = generateClient({ authMode: 'userPool' });

function UsersAdminPage() {
  const [users, setUsers] = useState<UserProfile[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // ── Fetch all profiles ───────────────────────────────────────────────
  useEffect(() => {
    (async () => {
      console.log('[UsersAdmin] fetching user profiles…');
      try {
        const res: any = await client.graphql({ query: listUserProfiles });
        const items: UserProfile[] = res?.data?.listUserProfiles?.items ?? [];
        console.log(`[UsersAdmin] received ${items.length} profiles`, items);
        setUsers(items);
      } catch (err) {
        console.error('❌ [UsersAdmin] listUserProfiles error:', err);
        setError('Failed to load users.');
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  // ── Role update helper ───────────────────────────────────────────────
  const setRole = async (id: string, role: 'admin' | 'owner' | 'cleaner') => {
    console.log(`[UsersAdmin] setting role for ${id} → ${role}`);
    try {
      await client.graphql({
        query: updateUserProfile,
        variables: { input: { id, role } },
      });
      setUsers((prev) => prev.map((u) => (u.id === id ? { ...u, role } : u)));
      console.log('[UsersAdmin] role updated ✓');
    } catch (err) {
      console.error('❌ [UsersAdmin] updateUserProfile error:', err);
      alert('Update failed – check console for details.');
    }
  };

  // ── Render ───────────────────────────────────────────────────────────
  return (
    <Layout title="User Management">
      <div className="max-w-4xl mx-auto p-6">
        <h1 className="text-3xl font-bold mb-6">User Roles</h1>

        {loading && <p>Loading users…</p>}
        {error && <p className="text-red-600">{error}</p>}

        {!loading && !error && (
          <table className="w-full border text-sm">
            <thead>
              <tr className="bg-gray-100 text-left">
                <th className="p-2">Username</th>
                <th className="p-2 text-center">Current role</th>
                <th className="p-2 text-center">Change role</th>
              </tr>
            </thead>
            <tbody>
              {users.map((u) => (
                <tr key={u.id} className="border-t">
                  <td className="p-2 break-words">{u.username}</td>
                  <td className="p-2 text-center font-medium">{u.role}</td>
                  <td className="p-2 text-center space-x-2">
                    {(['admin', 'owner', 'cleaner'] as const).map((r) => (
                      <button
                        key={r}
                        disabled={u.role === r}
                        onClick={() => setRole(u.id, r)}
                        className={`px-2 py-1 rounded shadow text-xs disabled:opacity-40 ${
                          u.role === r ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'
                        }`}
                      >
                        {r}
                      </button>
                    ))}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </Layout>
  );
}

// Guard the page — only Admins may manage roles
export default withRole(['admin'])(UsersAdminPage);